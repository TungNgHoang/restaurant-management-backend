using Elastic.Clients.Elasticsearch.Inference;
using Microsoft.EntityFrameworkCore;
using Net.payOS.Types;
using RestaurantManagement.Service.Dtos.InvoiceDto;
using RestaurantManagement.Service.Dtos.PaymentDto;
using RestaurantManagement.Service.Interfaces;
using System.Security.Cryptography;

namespace RestaurantManagement.Service.Implementation
{
    public class PaymentService : BaseService, IPaymentService
    {
        private readonly IHttpContextAccessor _httpContextAccessor;
        private readonly IRepository<TblReservation> _reservationsRepository;
        private readonly IRepository<TblTableInfo> _tablesRepository;
        private readonly IOrderRepository _orderRepository;
        private readonly IRepository<TblPayment> _paymentRepository;
        private readonly IRepository<TblPromotion> _promotionRepository;
        private readonly IRepository<TblCustomer> _customerRepository;
        private readonly INotificationService _notificationService;
        protected readonly RestaurantDBContext _dbContext;
        private readonly ILogger<PaymentService> _logger;
        private readonly IPayOSService _payOSService;
        private readonly IInvoiceService _invoiceService;
        public PaymentService(
            AppSettings appSettings,
            IMapper mapper,
            IHttpContextAccessor httpContextAccessor,
            IRepository<TblReservation> reservationsRepository,
            IRepository<TblTableInfo> tablesRepository,
            IOrderRepository orderRepository,
            IRepository<TblPayment> paymentRepositor,
            IRepository<TblPromotion> promotionRepository,
            IRepository<TblCustomer> customerRepository,
            INotificationService notificationService,
            RestaurantDBContext dbContext,
            ILogger<PaymentService> logger,
            IPayOSService payOSService,
            IInvoiceService invoiceService
            ) : base(appSettings, mapper, httpContextAccessor, dbContext)
        {
            _dbContext = dbContext;
            _httpContextAccessor = httpContextAccessor;
            _reservationsRepository = reservationsRepository;
            _tablesRepository = tablesRepository;
            _orderRepository = orderRepository;
            _paymentRepository = paymentRepositor;
            _promotionRepository = promotionRepository;
            _customerRepository = customerRepository;
            _notificationService = notificationService;
            _logger = logger;
            _payOSService = payOSService;
            _invoiceService = invoiceService;
        }

        public async Task<byte[]> CheckoutAndPayAsync(Guid resId, Guid ordId, string proCode, string payMethod)
        {
            // 1. Lấy thông tin đơn hàng
            var order = await _orderRepository.GetOrderByIdAsync(ordId);
            if (order == null)
                throw new ErrorException(StatusCodeEnum.ReservatioNotFound);

            // 2. Kiểm tra reservation
            var reservation = await _reservationsRepository.FindByIdAsync(resId);
            if (reservation == null || reservation.ResStatus != ReservationStatus.Serving.ToString())
                throw new ErrorException(StatusCodeEnum.A03);

            // 3. Kiểm tra bàn
            var table = await _tablesRepository.FindByIdAsync(reservation.TbiId);
            if (table == null || table.TbiStatus != TableStatus.Occupied.ToString())
                throw new ErrorException(StatusCodeEnum.A04);

            // 4. Kiểm tra khách hàng
            if (!reservation.CusId.HasValue)
                throw new ErrorException(StatusCodeEnum.C09);

            var customer = await _customerRepository.FindByIdAsync(reservation.CusId.Value);
            if (customer == null)
                throw new ErrorException(StatusCodeEnum.C09);

            // 5. Tính toán giảm giá
            decimal originalPrice = order.TotalPrice;
            decimal priceAfterVoucher = originalPrice;
            decimal voucherDiscount = 0;
            decimal rankDiscount = 0;

            if (!string.IsNullOrEmpty(proCode))
            {
                var promotionList = await _promotionRepository.FilterAsync(p =>
                    p.ProCode == proCode &&
                    !p.IsDeleted &&
                    p.StartDate <= DateTime.Now &&
                    p.EndDate >= DateTime.Now);

                var promotion = promotionList.FirstOrDefault();
                if (promotion == null)
                    throw new ErrorException(StatusCodeEnum.D04);

                if (Enum.TryParse<CustomerTierEnum>(customer.CusTier, out var customerTier) &&
                    Enum.TryParse<CustomerTierEnum>(promotion.DiscountType, out var requiredTier) &&
                    customerTier >= requiredTier)
                {
                    if (promotion.ConditionVal.HasValue && order.TotalPrice < promotion.ConditionVal.Value)
                        throw new ErrorException(StatusCodeEnum.D08);

                    if (promotion.ProQuantity <= 0)
                        throw new ErrorException(StatusCodeEnum.D09);

                    // Áp dụng giảm giá
                    voucherDiscount = promotion.DiscountVal <= 1
                        ? originalPrice * promotion.DiscountVal
                        : promotion.DiscountVal;

                    voucherDiscount = Math.Min(voucherDiscount, originalPrice);
                    priceAfterVoucher -= voucherDiscount;
                }
                else
                {
                    throw new ErrorException(StatusCodeEnum.D07);
                }
            }

            // 6. Giảm theo hạng khách
            if (Enum.TryParse<CustomerTierEnum>(customer.CusTier, out var tier))
            {
                var tierDiscountMap = new Dictionary<CustomerTierEnum, decimal>
        {
            { CustomerTierEnum.Standard, 0.02m },
            { CustomerTierEnum.Silver,   0.05m },
            { CustomerTierEnum.Gold,     0.07m },
            { CustomerTierEnum.Diamond,  0.10m }
        };

                if (tierDiscountMap.TryGetValue(tier, out var rankPercent))
                {
                    rankDiscount = priceAfterVoucher * rankPercent;
                    priceAfterVoucher -= rankDiscount;
                }
            }

            // 7. VAT
            var vat = 0.08m;
            var priceAfterVat = priceAfterVoucher * (1 + vat);

            using (var transaction = await _dbContext.Database.BeginTransactionAsync())
            {
                try
                {
                    var currentUserId = GetCurrentUserId();
                    var currentTime = ToGmt7(DateTime.UtcNow);

                    // Tạo Payment
                    var payment = new TblPayment
                    {
                        PayId = Guid.NewGuid(),
                        OrdId = order.OrdId,
                        CusId = order.CusId,
                        Amount = priceAfterVat,
                        PayMethod = payMethod,
                        PayStatus = "Completed",
                        IsDeleted = false,
                        CreatedAt = currentTime,
                        CreatedBy = currentUserId
                    };
                    await _paymentRepository.InsertAsync(payment);

                    // Cập nhật Reservation
                    reservation.ResStatus = ReservationStatus.Finished.ToString();
                    reservation.UpdatedAt = currentTime;
                    reservation.UpdatedBy = currentUserId;
                    await _reservationsRepository.UpdateAsync(reservation);

                    // Cập nhật Table
                    table.TbiStatus = TableStatus.Empty.ToString();
                    table.UpdatedAt = currentTime;
                    table.UpdatedBy = currentUserId;
                    await _tablesRepository.UpdateAsync(table);

                    // Cập nhật Voucher
                    if (!string.IsNullOrEmpty(proCode))
                    {
                        var promotion = await _promotionRepository.FindAsync(p => p.ProCode == proCode && !p.IsDeleted);
                        if (promotion != null)
                        {
                            promotion.ProQuantity -= 1;
                            if (promotion.ProQuantity <= 0)
                                promotion.IsDeleted = true;
                            await _promotionRepository.UpdateAsync(promotion);
                        }
                    }

                    // Cập nhật điểm khách hàng
                    customer.CusPoints += (int)priceAfterVoucher;
                    if (customer.CusPoints >= 10_000_000)
                        customer.CusTier = CustomerTierEnum.Diamond.ToString();
                    else if (customer.CusPoints >= 5_000_000)
                        customer.CusTier = CustomerTierEnum.Gold.ToString();
                    else if (customer.CusPoints >= 2_000_000)
                        customer.CusTier = CustomerTierEnum.Silver.ToString();
                    else if (customer.CusPoints >= 1_000_000)
                        customer.CusTier = CustomerTierEnum.Standard.ToString();
                    else
                        customer.CusTier = CustomerTierEnum.Unranked.ToString();

                    await _customerRepository.UpdateAsync(customer);

                    // 8. Lấy danh sách món
                    var items = await _dbContext.TblOrderDetails
                        .Where(d => d.OrdId == ordId && !d.IsDeleted)
                        .Join(_dbContext.TblMenus,
                              d => d.MnuId,
                              m => m.MnuId,
                              (d, m) => new InvoicePrintItemDto
                              {
                                  Name = m.MnuName,
                                  Quantity = d.OdtQuantity,
                                  UnitPrice = m.MnuPrice
                              })
                        .ToListAsync();

                    for (int i = 0; i < items.Count; i++)
                        items[i].Index = i + 1;

                    // 9. Build Invoice DTO
                    var invoiceDto = new InvoicePrintDto
                    {
                        OrderId = ordId,
                        InvoiceCode = $"HD-{DateTime.Now:yyyyMMdd}-{new Random().Next(100, 999)}",
                        StoreName = "PIZZA DAAY",
                        StoreAddress = "Vạn Phúc, Hà Đông, Hà Nội",
                        StorePhone = "123 456 789",

                        CustomerName = customer.CusName ?? reservation.TempCustomerName,
                        CustomerPhone = reservation.TempCustomerPhone,
                        TableNumber = table.TbiTableNumber.ToString(),
                        InvoiceDate = currentTime,

                        Items = items,

                        SubTotal = originalPrice,
                        VatRate = vat,
                        VatAmount = priceAfterVoucher * vat,

                        VoucherCode = proCode,
                        VoucherDiscount = voucherDiscount,
                        RankDiscount = rankDiscount,

                        TotalAmount = priceAfterVat,
                        PayMethod = payMethod
                    };

                    // 10. Sinh file PDF
                    var invoice = await _invoiceService.GenerateInvoicePdf(order.OrdId, invoiceDto);
                    await transaction.CommitAsync();

                    // 11. Notification
                    try
                    {
                        await _notificationService.SendPaymentSuccessNotificationAsync(
                            resId, priceAfterVat, customer.CusName ?? reservation.TempCustomerName ?? "Khách hàng");
                        _logger.LogInformation("Đã gửi thông báo thanh toán thành công cho ResId: {ResId}", resId);
                    }
                    catch (Exception ex)
                    {
                        _logger.LogWarning(ex, "Lỗi khi gửi thông báo thanh toán thành công cho ResId: {ResId}", resId);
                    }

                    return invoice;
                }
                catch (Exception ex)
                {
                    await transaction.RollbackAsync();
                    throw new Exception($"Lỗi khi check-out: {ex.Message}");
                }
            }
        }
    }
}
